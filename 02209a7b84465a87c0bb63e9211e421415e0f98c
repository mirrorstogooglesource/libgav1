{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "74d1ae53_4f4f3ac9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1476426
      },
      "writtenOn": "2020-12-16T13:24:25Z",
      "side": 1,
      "message": "Hi James,\nAs per your suggestion we have updated the patchset 11. We are seeing marginal increase in scaling on removing GetMask function pointer table. Please review the patch.\n\nModule level scaling:\nBlock size   Scaling w.r.t. C[InterIntra enabled]\n  8x8        2.69x\n 8x16        3.32x\n 16x8        2.96x\n16x16        3.50x\n16x32        3.92x\n32x16        3.54x\n32x32        3.72x\n\nBlock size   Scaling w.r.t. C[InterIntra disabled]\n   8x8       2.36x\n   8x16      2.82x\n   16x8      2.94x\n  16x16      3.36x\n  16x32      3.69x\n  32x16      3.46x\n  32x32      3.59x\n  32x64      3.64x\n  64x32      3.62x\n  64x64      3.57x\n 64x128      3.59x\n 128x64      3.65x\n128x128      3.67x\n\nThank you.",
      "revId": "02209a7b84465a87c0bb63e9211e421415e0f98c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d48d9dde_735f671d",
        "filename": "src/dsp/mask_blend.cc",
        "patchSetId": 11
      },
      "lineNbr": 181,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2020-12-17T05:52:16Z",
      "side": 1,
      "message": "I would leave these as they since in 8bpp we have a special case. the goal is that the defines roughly match the function pointer",
      "revId": "02209a7b84465a87c0bb63e9211e421415e0f98c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b261639a_31cc7c15",
        "filename": "src/dsp/x86/mask_blend_sse4.cc",
        "patchSetId": 11
      },
      "lineNbr": 465,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2020-12-17T05:52:16Z",
      "side": 1,
      "message": "drop this else since the other branch returns:\n\nhttp://clang.llvm.org/extra/clang-tidy/checks/readability-else-after-return.html",
      "revId": "02209a7b84465a87c0bb63e9211e421415e0f98c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9d7f72b_e1ca9996",
        "filename": "src/dsp/x86/mask_blend_sse4.cc",
        "patchSetId": 11
      },
      "lineNbr": 468,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2020-12-17T05:52:16Z",
      "side": 1,
      "message": "x86 supports unaligned loads, but sanitizers may still report an issue. without looking closely at the alignment of the mask and stride I\u0027d prefer this to be a memcpy() [1] which should produce the same code. Please check though.\n\n[1] https://chromium.googlesource.com/codecs/libgav1/+/refs/heads/master/src/dsp/x86/common_sse4.h#81",
      "range": {
        "startLine": 468,
        "startChar": 11,
        "endLine": 468,
        "endChar": 44
      },
      "revId": "02209a7b84465a87c0bb63e9211e421415e0f98c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9414a7e_10ec4a7f",
        "filename": "src/dsp/x86/mask_blend_sse4.cc",
        "patchSetId": 11
      },
      "lineNbr": 496,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2020-12-17T05:52:16Z",
      "side": 1,
      "message": "same comment here for removing the else:\n\nhttp://clang.llvm.org/extra/clang-tidy/checks/readability-else-after-return.html",
      "revId": "02209a7b84465a87c0bb63e9211e421415e0f98c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbbf2a96_9fe1bede",
        "filename": "src/dsp/x86/mask_blend_sse4.cc",
        "patchSetId": 11
      },
      "lineNbr": 518,
      "author": {
        "id": 1000882
      },
      "writtenOn": "2020-12-16T15:25:56Z",
      "side": 1,
      "message": "The compiler may be doing this already, but you could use LoadHi8/LoadLo8 instead. ie:\n\nconst __m128i pred_val_1 \u003d LoadHi8(LoadLo8(pred_1), pred_1 + pred_stride_1);",
      "range": {
        "startLine": 516,
        "startChar": 0,
        "endLine": 518,
        "endChar": 65
      },
      "revId": "02209a7b84465a87c0bb63e9211e421415e0f98c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}