{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d73f4815_0600710f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2022-05-05T23:50:06Z",
      "side": 1,
      "message": "So I think this is the item in the bug that\u0027s affecting things here:\n* arithmetic between two different enums is deprecated.  These two points together make lots of code that used the \"enum hack\" to declare constants broken.\n\nWe went with this to avoid ODR issues as we don\u0027t have inline constexpr in C++11. Let me take a closer look.",
      "revId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c825bb8_105d69b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2022-05-09T18:10:19Z",
      "side": 1,
      "message": "I think inline variables aren\u0027t relevant to the changes here since none of them were done inside classes?  Maybe I\u0027m wrong.  But offhand I would think this change is C++11-compatible.\n\nIf not, there is an alternate way to address some of this, which is to insert explicit casts to integral types around uses of these enums that trigger the warnings.  That\u0027s a lot uglier so I\u0027d rather avoid it if possible.",
      "parentUuid": "d73f4815_0600710f",
      "revId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "785b67a2_a29c3b00",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2022-05-09T18:39:59Z",
      "side": 1,
      "message": "\u003e I think inline variables aren\u0027t relevant to the changes here since none of them were done inside classes?  Maybe I\u0027m wrong.  But offhand I would think this change is C++11-compatible.\n\u003e \n\nWe\u0027ll at least get clang-tidy warnings for unused variables without inline constexpr (we don\u0027t run that here currently). The ODR concerns for simple integers are likely minimal.\n\n\u003e If not, there is an alternate way to address some of this, which is to insert explicit casts to integral types around uses of these enums that trigger the warnings.  That\u0027s a lot uglier so I\u0027d rather avoid it if possible.\n\nThanks, I cc\u0027d you on a change. I\u0027ll propagate it when it lands.",
      "parentUuid": "1c825bb8_105d69b5",
      "revId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc5cc7ee_4cffc297",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2022-05-10T15:02:06Z",
      "side": 1,
      "message": "Is this one fully obsolete then?  If so I\u0027ll abandon.",
      "parentUuid": "785b67a2_a29c3b00",
      "revId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "520ac225_0068e5fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2022-05-11T00:19:24Z",
      "side": 1,
      "message": "\u003e Is this one fully obsolete then?  If so I\u0027ll abandon.\n\nYes, the change I made should quiet all warnings. I\u0027ll set up some c++17 and c++20 build coverage to avoid regressions.",
      "parentUuid": "fc5cc7ee_4cffc297",
      "revId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "118a3276_36a1a534",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2022-05-05T14:43:09Z",
      "side": 1,
      "message": "The build failures don\u0027t look to be my fault?",
      "revId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84f36538_ffb7252d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2022-05-05T23:50:06Z",
      "side": 1,
      "message": "\u003e The build failures don\u0027t look to be my fault?\n\nInfra is fun. I\u0027ll take a look.",
      "parentUuid": "118a3276_36a1a534",
      "revId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "210c22a2104ea331ccbe3e1911c2b0dc489e2705",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}